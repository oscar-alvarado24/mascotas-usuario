plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.protobuf' version '0.8.18'
}

group = 'com.project.adoption.pet'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url 'https://eps-colombia-730335582376.d.codeartifact.us-east-1.amazonaws.com/maven/librerias/'
        credentials {
            username "aws"
            password System.env.CODEARTIFACT_AUTH_TOKEN
        }
    }
}

ext {
    grpcVersion = '1.58.0'
    protobufVersion = '3.24.0'
    springGrpcVersion = '2.15.0.RELEASE'
}
dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.hibernate.validator:hibernate-validator:7.0.5.Final'
    //Feing
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.3'

    //generateSession
    implementation 'com.colombia.eps.library:generateSession:1.0.0'

    //Dynamo
    implementation 'software.amazon.awssdk:dynamodb:2.20.43'
    implementation 'software.amazon.awssdk:dynamodb-enhanced:2.20.43'

    //lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    //graphql
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.graphql:spring-graphql'
    implementation 'com.graphql-java-kickstart:graphiql-spring-boot-starter:11.1.0'
    //grpc
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    //implementation 'net.devh:grpc-spring-boot-starter:2.13.1.RELEASE'
    implementation "net.devh:grpc-client-spring-boot-starter:${springGrpcVersion}"

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}" // VersiÃ³n del compilador de Protobuf
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        doc {
            artifact = 'io.github.pseudomuto:protoc-gen-doc:1.5.1'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDir 'build/generated/source/proto/main/java'
            srcDir 'build/generated/source/proto/main/grpc'
        }
    }
}
tasks.withType(JavaCompile).configureEach {
    dependsOn 'generateProto'
    options.encoding = 'UTF-8'
    options.deprecation = true
}
tasks.named('processResources') {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
tasks.named('test') {
    useJUnitPlatform()
}
